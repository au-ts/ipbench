.TH "ipbenchd" "1" "Mar 2024" "Ian Wienand, Matthew Rossouw, Peter Chubb, Christopher Irving" ""
.SH "NAME"
.LP 
ipbenchd \- Client daemon for the ipbench testing suite
.SH "SYNTAX"
.LP 
ipbenchd [\fB\-i\fR <\fIip\fP>|\fB\-\-ip\fP=<\fIip\fP>]
[\fB\-p\fR <\fIport\fP>|\fB\-\-port\fP=<\fIport\fP>]
[\fB\-t\fP|\fB\-\-target\fP] [\fB\-d\fP|\fB\-\-debug\fP]
.br
ipbenchd \fB\-h\fP|\fB\-\-help\fR
.br
ipbenchd \fB\-\-version\fP
.SH "DESCRIPTION"
.LP 
This program is the client portion of the ipbench testing suite.  Each client must be running this daemon to receive commands from the controlling node. The daemon must be run as root to allow access to ports. It also does not fork into a separate process automatically. So you may want to run something like
.LP
.B sudo /usr/bin/ipbenchd &
.LP
to run the daemon in the background.
.br
This daemon can also be used as the target portion of the testing suite, by running it with \fB\-t\fR
.LP
For more on the structure of the ipbench testing suite, see the man page for ipbench(1)
.SH "OPTIONS"
.LP 
.TP 
\fB\-\-version\fR
Show the program's version number and exit.
.TP 
\fB\-h\fP|\fB\-\-help\fR
Output help information.
.TP 
\fB\-i\fR <\fIip\fP>|\fB\-\-ip\fP=<\fIip\fP>
Makes the daemon bind to the specified \fIip\fP. Default is to bind to all available ip addresses.
.TP 
\fB\-p\fR <\fIport\fP>|\fB\-\-port\fP=<\fIport\fP>
Makes the daemon listen on the specified \fIport\fP.
.TP 
\fB\-d\fP|\fB\-\-debug\fR
Enable debugging; provide verbose output.
.TP 
\fB\-t\fP|\fB\-\-target\fR
Put the daemon in target mode
.SH "COMMUNICATING WITH IPBENCHD"
.LP
By sending messages to the port ipbenchd is listening on (e.g. using telnet) you
can issue commands to ipbenchd. The available commands are listed here.

These first four commands can be issued at any time.

.TP
.B
HELP
.br
Prints a list of all ipbenchd commands.
.TP
.B
STATUS
.br
Show the status of ipbenchd.
.TP
.B
QUIT
.br
Close the connection to ipbenchd.
.TP
.B
ABORT
.br
If ipbenchd is currently running a test, end the test immediately without
processing data and return to ready state so another test can be configured and run.
Then close the connection to ipbenchd.
This command is useful if a previous test failed unexpectedly and ipbenchd
has been left unable to accept new tests.
.LP
These remaining commands 
take ipbenchd through the process of preparing, running, and completing
a test. Ipbenchd will only accept one of these commands if it has been brought
to the correct state by successful runs of the previous commands in order.
If not, a syntax error will be returned.
.TP
.B
HELLO
.br
Prepare ipbenchd to run a new test. This command can only be run when ipbenchd
is in its initial ready state and not running a test.
.TP
.B
LOAD <test-name>
.br
Specify which test will be run. This command can only be run after HELLO.
.TP
.B
SETUP
.br
Configure how the test will be run. This command can only be run after LOAD.
There are two versions of the setup command, based on whether ipbenchd is
running in client mode or target mode. In client mode, SETUP must be run as
.br

\fBSETUP\fP target::<test-target>||port::<test-port>||args::<test-args>
.br

This passes the target, port on the target, and arguments for the
test in question to use. In target mode, SETUP must be run as
.br

\fBSETUP\fP args::<target-test-args>
.br

Only the arguments to the target test are needed, since target
tests do not involve other machines.
.TP
.B
START
.br
Begins running the test which has been configured. This command can only be run
after SETUP.
.TP
.B
STOP
.br
Ends the currently running test. This command can only be run after START, and
only when ipbenchd is running in target mode.
In client mode a test will finish based on completing certain tasks.
In target mode a test will keep running until ordered to stop with this command.

.LP
Once one user sends HELLO to ipbenchd, no other users will be able to send
test-related commands until the current test is completed or aborted.
This will be displayed in STATUS output as "Running a test".
.LP
The state of which of HELLO, LOAD, SETUP, START, STOP should be run next
is maintained in your connection to ipbenchd, not globally. If you disconnect
from ipbenchd, you'll need to prepare your test again from the beginning.
Ipbenchd won't remember what state you reached.
.LP
Outside of debugging, you should never need to run HELLO, LOAD, SETUP, START,
or STOP manually. Use the ipbench controller program to handle running
benchmarks, which will automatically issue these commands in the correct
order with the correct syntax for you.
.LP
The main reason to manually connect to ipbenchd is to check STATUS
or use ABORT to clean up from a benchmark run which failed unexpectedly.
You can also configure ipbench to send ABORT to each client before running
a test.

.SH "FILES"
.LP 
(none)
.SH "ENVIRONMENT VARIABLES"
.LP 
(none)
.SH "EXAMPLES"
.LP 
examples
.SH "AUTHORS"
.LP 
ipbenchd by Ian Wienand <ianw@gelato.unsw.edu.au>,
.br
Matthew Rossouw <matthew.rossouw@unsw.edu.au>,
.br
Peter Chubb <peter.chubb@unsw.edu.au>.
.br
Man page by Christopher Irving <c.irving@unsw.edu.au>.
.SH "SEE ALSO"
.LP 
ipbench(1)
