.TH "ipbench" "1" "Mar 2024" "Ian Wienand, Matthew Rossouw, Peter Chubb, Christopher Irving" "ipbench"
.SH "NAME"
.LP 
ipbench \- Control an ipbench session
.SH "SYNTAX"
.HP
.ad l
ipbench
[\c
\fB\-c\fP <\fIclient\fP>|\fB\-\-client\fP=<\fIclient\fP> ...]
[\c
\fB\-p\fP <\fIport\fP>|\fB\-\-port\fP=<\fIport\fP>]
[\c
\fB\-t\fP <\fItest\fP>|\fB\-\-test\fP=<\fItest\fP>]
[\c
\fB\-a\fP <\fIargs\fP>|\fB\-\-test\-args\fP=<\fIargs\fP>]
[\c
\fB\-r\fP|\fB\-\-reset\fP]
[\c
\fB\-T\fP <\fIhostname\fP>|\fB\-\-test\-target\fP=<\fIhostname\fP>]
[\c
\fB\-P\fP <\fIport\fP>|\fB\-\-test\-port\fP=<\fIport\fP>]
[\c
\fB\-\-target\-test\-hostname\fP=<\fIhostname\fP>]
[\c
\fB\-\-target\-test\-port\fP=<\fIport\fP>]
[\c
\fB\-\-target\-test\fP=<\fItarget-test\fP>]
[\c
\fB\-\-target\-test\-args\fP=<\fIargs\fP>]
[\c
\fB\-\-test\-controller\-args\fP=<\fIargs\fP>]
[\c
\fB\-\-target\-test\-controller\-args\fP=<\fIargs\fP>]
[\c
\fB\-\-config\fP=<\fIconfig\fP>]
[\c
\fB\-d\fP|\fB--debug\fP]

.ad
.HP
ipbench [\fB\-h\fP|\fB\-\-help\fP]
.HP
ipbench \fB\-\-version\fP
.SH "DESCRIPTION"
.LP 
The ipbench network benchmarking suite consists of three main components.
.LP
- A 'target' program running on the machine under study
.br
- Multiple 'client' programs running on other machines, which will test the target machine's performance
.br
- A 'controller', which tells the others what to do and coordinates starting and stopping them
.LP
The ipbench program fulfills the role of controller, allowing the user to specify where the clients
and target are, how they should communicate, and what tests they should run.
.LP
The ipbenchd program fulfills the role of client. An instance of ipbenchd should be running on
the relevant port on each client machine before ipbench is invoked.
.LP
The ipbenchd program can also fulfill the role of target, running on the target machine.
However, the target machine might not be running a complete operating system,
making it difficult to install ipbenchd. In this case you should implement your own
target program on the target machine.
.SH "OPTIONS"
.LP
.TP
\fB\-c\fP <\fIclient\fP>|\fB\-\-client\fP=<\fIclient\fP>
Hostname or IP on which a client ipbenchd instance will be running,
for the ipbench controller (this program) to send commands to. Repeat this argument
multiple times to specify multiple clients.
.TP
\fB\-p\fP <\fIport\fP>|\fB\-\-port\fP=<\fIport\fP>
Port on the client machines which the controller
will use to contact the clients. ipbenchd must be listening on this port
on each client.
.TP
\fB\-t\fP <\fItest\fP>|\fB\-\-test\fP=<\fItest\fP>
Name of test which the clients will all load and run.
.TP 
\fB\-a\fP <\fIargs\fP>|\fB\-\-test\-args\fP=<\fIargs\fP>
Arguments which will be provided to each client, affecting how they
perform their test.
.TP
\fB\-r\fP|\fB\-\-reset\fP
Sends an ABORT message to each client from the controller, causing the
connection to close and reopen, each time the controller sets up for a test.
This might be useful if a test fails to complete properly.
.TP 
\fB\-T\fP <\fIhostname\fP>|\fB\-\-test\-target\fP=<\fIhostname\fP>
Hostname or IP address of the target machine that the clients will use to
communicate with the target and perform their tests.
.TP 
\fB\-P\fP <\fIport\fP>|\fB\-\-test\-port\fP=<\fIport\fP>
Port on the target machine that the clients will use to communicate with the
target and perform their tests.
The target needs to be listening on this port.
The target daemon can be ipbenchd in target mode, or another program.
.TP
\fB\-\-target\-test\-hostname\fP=<\fIhostname\fP>
Hostname or IP address of the target machine that the controller will use to
communicate with the target.
.TP 
\fB\-\-target\-test\-port\fP=<\fIport\fP>
Port on the target machine that the controller will use to communicate with
the target and instruct it to run tests.
The target needs to be listening on this port.
The target daemon can be ipbenchd in target mode, or another program.
.TP 
\fB\-\-target\-test\fP=<\fItarget-test\fP>
Name of test which the target will load and run. This allows monitoring aspects
of the target system while the clients test its network performance.
.TP 
\fB\-\-target\-test\-args\fP=<\fIargs\fP>
Arguments which will be provided to the target, affecting how it performs any
tests it runs on itself.
.TP 
\fB\-\-test\-controller\-args\fP=<\fIargs\fP>
This string is ultimately passed to the setup_controller function in the
test being run by the clients. All tests currently available with ipbench
either ignore the setup_controller function or accept only the arguments
which are also later given during setup. This argument is therefore
unneeded and may be ignored.
.TP 
\fB\-\-target\-test\-controller\-args\fP=<\fIargs\fP>
This string is ultimately passed to the setup_controller function in the
test being run on the target. All tests currently available with ipbench
either ignore the setup_controller function or accept only the arguments
which are also later given during setup. This argument is therefore
unneeded and may be ignored.
.TP
\fB\-\-config\fP=<\fIconfig\fP>
Specify an input config file (XML based, see below).
This allows you to provide ipbench options with more flexibility
than the command line.
.TP 
\fB\-d\fP|\fB--debug\fP
Enable debugging; verbose output.
.TP 
\fB\-\-version\fP
Show program's version number and exit.
.TP 
\fB\-h\fP|\fB\-\-help\fP
Show help information.
.SH "XML CONFIGURATION FILE"
Using the \fB--config\fP argument to ipbench, you can provide settings for your ipbench session
through an xml file instead of (or in addition to) command line arguments.
.br
More specific options override more general options. Command line arguments are the
most general and settings in the xml will always take precedence over them. Where an option
can be specified in multiple places in the xml, the most deeply nested instance
of the option is the one that is used. Not all options need be specified in the xml,
although some are required.
.br
The basic structure of an xml configuration file for ipbench should be as follows.
Which command line arguments correspond to which xml attributes are indicated.

.LP
.nf
	<ipbench>

		<!-- 
			'test' tag
			* name (required) : \fB--test\fP for all clients
			* args : \fB--test-args\fP for all clients
			* target : \fB--test-target\fP for all clients
			* port : \fB--test-port\fP for all clients
		-->

		<test name="" args="" port="" target="" controller_args="">

			<!-- 
				'client' tag
				* hostname (required) : \fB--client\fP for this client
				* port : \fB--port\fP for this client
				* test_target : \fB--test-target\fP for this client
				* test_port : \fB--test-port\fP for this client
				* test_args : \fB--test-args\fP for this client
			-->

			<client hostname="" port="" test_port="" test_args="" test_target=""/>

		</test>

		<!-- 
			'target_test' tag
			* name (required) : \fB--target-test\fP
			* args : \fB--target-test-args\fP
			* controller_args : \fB--target-test-controller-args\fP
		-->

		<target_test name="" args="" controller_args="">

			<!-- 
				'target' tag
				* hostname (required) : \fB--target-test-hostname\fP
				* port : \fB--target-test-port\fP
				* test_args : \fB--target-test-args\fP
			-->

			<target hostname="--target-test-hostname" port="--target-test-port" test_args="--target-test-args"/>
		</target_test>
	</ipbench>
.fi
.LP

For instance, below is an example of the same ipbench controller input expressed twice.
.br
The first case shows how the input could be given to ipbench as command line arguments.

.HP
.ad l
\fBipbench\fP \fB-p\fP 8036 \fB--client\fP 10.13.0.4 \fB--client\fP 10.13.0.5 \fB--client\fP 10.13.0.6 \fB--client\fP 10.13.0.7 \fB--test-target\fP=172.16.1.1 \fB--test-port\fP=1235 \fB--test\fP=latency \fB--test-args\fP="socktype=udp,bps=250000000,size=1472,warmup=0,cooldown=0,samples=50000" \fB--target-test\fP=cpu_target \fB--target-test-hostname\fP=172.16.1.1 \fB--target-test-port\fP=1236

.LP
The second case shows the contents of an xml file which will produce the same configuration if passed to ipbench.
.nf

	<ipbench>

		<test name="latency"
			args="socktype=udp,bps=250000000,size=1472,warmup=0,cooldown=0,samples=50000"
			port="1235" target="172.16.1.1">

			<client hostname="10.13.0.4" port="8036"/>
			<client hostname="10.13.0.5" port="8036"/>
			<client hostname="10.13.0.6" port="8036"/>
			<client hostname="10.13.0.7" port="8036"/>
		</test>

		<target_test name="cpu_target">
			<target hostname="172.16.1.1" port="1236"/>
		</target_test>
	</ipbench>
.fi
.LP

For more details on options in the xml configuration file, see the sample config.xml in the ipbench-controller package's documentation directory on your system.
.SH "FILES"
.LP 
(none)
.SH "ENVIRONMENT VARIABLES"
.LP 
(none)
.SH "EXAMPLES"
.LP 
examples
.SH "AUTHORS"
.LP 
ipbench by Ian Wienand <ianw@gelato.unsw.edu.au>,
.br
Matthew Rossouw <matthew.rossouw@unsw.edu.au>,
.br
Peter Chubb <peter.chubb@unsw.edu.au>.
.br
Man page by Christopher Irving <c.irving@unsw.edu.au>.
.SH "SEE ALSO"
.LP 
ipbenchd(1)
